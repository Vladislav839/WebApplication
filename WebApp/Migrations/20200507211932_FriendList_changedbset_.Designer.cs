// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Models;

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200507211932_FriendList_changedbset_")]
    partial class FriendList_changedbset_
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WebApp.Models.Friend", b =>
                {
                    b.Property<int>("Person1Id")
                        .HasColumnType("integer");

                    b.Property<int>("Person2Id")
                        .HasColumnType("integer");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserModelId1")
                        .HasColumnType("integer");

                    b.HasKey("Person1Id", "Person2Id");

                    b.HasIndex("Person2Id");

                    b.HasIndex("UserModelId");

                    b.HasIndex("UserModelId1");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("WebApp.Models.LikesPost", b =>
                {
                    b.Property<int>("RatingPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("integer");

                    b.HasKey("RatingPersonId", "PostId");

                    b.HasIndex("UserModelId");

                    b.ToTable("LikesPosts");
                });

            modelBuilder.Entity("WebApp.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("date")
                        .HasColumnType("text");

                    b.Property<int>("owner")
                        .HasColumnType("integer");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApp.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApp.Models.UsersPost", b =>
                {
                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserModelId")
                        .HasColumnType("integer");

                    b.HasKey("OwnerId", "PostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserModelId");

                    b.ToTable("UsersPosts");
                });

            modelBuilder.Entity("WebApp.Models.Friend", b =>
                {
                    b.HasOne("WebApp.Models.User", "Person1")
                        .WithMany("Friends1")
                        .HasForeignKey("Person1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.User", "Person2")
                        .WithMany("Friends2")
                        .HasForeignKey("Person2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.UserModel", null)
                        .WithMany("Friends1")
                        .HasForeignKey("UserModelId");

                    b.HasOne("WebApp.Models.UserModel", null)
                        .WithMany("Friends2")
                        .HasForeignKey("UserModelId1");
                });

            modelBuilder.Entity("WebApp.Models.LikesPost", b =>
                {
                    b.HasOne("WebApp.Models.Post", "Post")
                        .WithMany("LikesPosts")
                        .HasForeignKey("RatingPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.User", "RatingPerson")
                        .WithMany("LikesPosts")
                        .HasForeignKey("RatingPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.UserModel", null)
                        .WithMany("LikesPosts")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("WebApp.Models.UsersPost", b =>
                {
                    b.HasOne("WebApp.Models.User", "Owner")
                        .WithMany("UserPosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Post", "Post")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.UserModel", null)
                        .WithMany("UserPosts")
                        .HasForeignKey("UserModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
